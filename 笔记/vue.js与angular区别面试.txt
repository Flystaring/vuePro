
一、数据绑定
Angular实现原理：
把这对象绑定在scope下，通过遍历这些对象来发现他们是否改变，如果改变就会调用相应的处理方法来实现双向绑定

Vue.js 也支持双向绑定且非常非常容易优化。(为什么呢)Angular，
当 watcher 越来越多时会变得越来越慢，因为作用域内的每一次变化，
所有 watcher 都要重新计算。
并且，如果一些 watcher 触发另一个更新，可能要运行多次。
Vue.js 则根本没有这个问题，因为它是异步列队更新，所有的数据变化都是独立地触发
，除非它们之间有明确的依赖关系。唯一需要做的优化是在 v-for 上使用 track-by。

二、视图渲染
AngularJS的工作原理是:HTML模板将会被浏览器解析到DOM中, DOM结构成为AngularJS编译器的输入。
AngularJS将会遍历DOM模板, 来生成相应的NG指令,所有的指令都负责针对view(即HTML中的ng-model)来设置数据绑定。
因此, NG框架是在DOM加载完成之后, 才开始起作用的。

Vue.js是使用真实 DOM 作为模板，数据绑定到真实节点。Vue.js 的应用环境必须提供 DOM。

三、性能与优化(可不说)
性能方面，这几个主流框架都应该可以轻松应付大部分常见场景的性能需求，区别在于可优化性和优化对于开发体验的影响。
从整体趋势上来说，浏览器和手机还会越变越快，
框架本身的渲染性能在整个前端性能优化体系中，
会渐渐淡化，更多的优化点还是在构建方式、缓存、图片加载 等方面。

四、模块化与组件化
Angular使用依赖注入来解决模块之间的依赖问题，模块几乎都依赖于注入容器以及其他相关功能。
不是异步加载的，根据依赖列出第一次加载所需的所有依赖。
Vue中指令和组件分得更清晰。指令只封装 DOM 操作，而组件代表一个自给自足的独立单元 ――
 有自己的视图和数据逻辑。

五、语法与代码风格
Vue,Angular2都支持ES6。
Angular 2 依然保留以 HTML 为中心。Angular 2 将 “JS” 嵌入 HTML。
Vue 的默认 API 是以简单易上手为目标，但是进阶之后推荐的是使用
webpack + vue-loader 的单文件组件格式（template,script,style写在一个vue文件里作为一个组件）
